// ANSI Z535
$ansi-red: #bd2024 !default;
$ansi-orange: #ff7900 !default;
$ansi-yellow: #ffe100 !default;
$ansi-green: #159660 !default;
$ansi-blue: #004488 !default;
$ansi-purple: #6f2580 !default;

// ISO 3864
$iso-red: #9b2423 !default;
$iso-yellow: #f9a800 !default;
$iso-green: #237f52 !default;
$iso-blue: #005387 !default;
$iso-white: lighten(#ececec, 4%) !default;
$iso-black: darken(#2b2b2c, 8%) !default;

:root {
  color-scheme: light dark;
  --line-height: 1.2;
}

@media (prefers-color-scheme: light) {
  @import "ansi/light";

  :root {
    --bg: var(--iso-white);
    --fg: var(--iso-black);
  }
}

@media (prefers-color-scheme: dark) {
  @import "ansi/dark";

  :root {
    --bg: var(--iso-black);
    --fg: var(--iso-white);
  }
}

body,
.text-serif {
  font-family: "Roboto Slab";
}

pre,
code,
kbd,
.text-mono {
  font-family: "Iosevka myrrlyn regular", var(--fonts-mono);
}

samp,
.text-term {
  font-family: "Iosevka myrrlyn term regular", "Iosevka term", var(--fonts-mono);
}

body,
main {
  background-color: var(--bg);
  color: var(--fg);
}

a {
  color: var(--ansi-blue);

  &:visited {
    color: var(--ansi-purple);
  }
}

details[open] > summary[aria-current="step"] {
  --after: "👇";
}

[aria-current="step"], [aria-current="page"] {
  --after: " 👈";
}

[aria-current="step"],
[aria-current="page"] {
  &::after {
    content: var(--after);
  }
}

%heading {
  margin-block: 1em;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  @extend %heading;
}

h1 {
  font-size: 2rem;

  &.title {
    color: var(--ansi-blue);
  }
}

h2 {
  font-size: 1.875rem;

  &:not(.subtitle) {
    color: var(--ansi-purple);
  }

  &.subtitle {
    color: var(--ansi-orange);
  }
}

h3 {
  font-size: 1.75rem;
  color: var(--ansi-green);
}

h4 {
  font-size: 1.625rem;
  color: var(--ansi-yellow);
}

h5 {
  font-size: 1.5rem;
  color: var(--ansi-red);
}

h6 {
  font-size: 1.25rem;
  color: var(--ansi-orange);
}

p {
  line-height: 1.375;
  // &:first-child {
  //   margin-block-start: 0;
  // }
  // &:last-child {
  //   margin-block-end: 0;
  // }
}

// aside,
// blockquote,
//   &:has(> p) {
//     padding-block: 1rem;
//   }
// }

blockquote {
  // &::before {
  //   content: "“";
  //   font-size: 2rem;
  //   display: inline;
  // }
  // &::after {
  //   content: "”";
  //   font-size: 2rem;
  // }
  & > cite {
    &::before {
      content: "—";
    }
  }
}

@mixin barberpole($color-bg, $color-fg, $angle: -45deg, $width: 12, $side: "") {
  border-color: var(--bg);
  border-style: solid;
  border#{$side}-width: #{$width}px;
  // TODO(myrrlyn): Figure out the math to use here. cos(angle) * width of two
  // stripes? Unsure.
  border-image: repeating-linear-gradient(
      $angle,
      $color-bg,
      $color-bg #{$width}px,
      $color-fg #{$width}px,
      $color-fg calc(#{$width}px * 2)
    )
    $width;
}

%block {
  border: 0 solid transparent;
  margin: 1rem 0;
  padding: 0 1rem;

  > :only-child {
    margin-block: 0;
  }

  &:has(> :only-child) {
    padding-block: 1rem;
  }
}

aside,
blockquote {
  @extend %block;
}

main aside,
blockquote {
  --stripe-basis: 3;
  --color-bg: var(--bg);
  --color-a1: var(--ansi-red);
  --color-a2: var(--ansi-blue);

  border-color: var(--fg);
  border-style: solid;
  border-inline-start-width: 12px;
  border-inline-end-width: 12px;
  border-image: repeating-linear-gradient(
      -60deg,
      var(--color-a1),
      var(--color-a1) calc(var(--stripe-basis) * 2px),
      var(--color-bg) calc(var(--stripe-basis) * 2px),
      var(--color-bg) calc(var(--stripe-basis) * 3px),
      var(--color-a2) calc(var(--stripe-basis) * 3px),
      var(--color-a2) calc(var(--stripe-basis) * 5px),
      var(--color-bg) calc(var(--stripe-basis) * 5px),
      var(--color-bg) calc(var(--stripe-basis) * 6px)
    )
    calc(12 / var(--stripe-basis));

  @media (prefers-color-scheme: dark) {
    --color-a1: var(--ansi-green);
    --color-a2: var(--ansi-yellow);
  }
}

.block-harm,
.barber-red {
  @include barberpole(var(--iso-white), var(--ansi-red));
}

.barber-orange {
  @include barberpole(var(--iso-white), var(--ansi-orange));
}

.block-warn {
  @include barberpole(var(--iso-black), var(--ansi-yellow));
}

.barber-yellow {
  @include barberpole(var(--iso-white), var(--ansi-yellow));
}

.block-safe,
.barber-green {
  @include barberpole(var(--iso-white), var(--ansi-green));
}

.block-info,
.barber-blue {
  @include barberpole(var(--iso-white), var(--ansi-blue));
}

.barber-purple {
  @include barberpole(var(--iso-white), var(--ansi-purple));
}

dl {
  counter-reset: defns;
  dt {
    font-style: italic;
    counter-increment: defns;
    &::before {
      content: counter(defns) ". ";
      font-style: normal;
    }
    &::after {
      content: ":";
    }
    &:not(:first-child) {
      margin-block-start: 1rem;
    }
  }
}

article ol {
  counter-reset: oli;
  list-style-type: none;
  padding-inline-start: 2rem;

  & > li {
    counter-increment: oli;

    &::before {
      content: counters(oli, ".") ". ";
      position: relative;
    }
  }
}

$border-common: 2px solid var(--fg);
$border-ul-li: $border-common;

%ul-li-vertical {
  border-inline-start: $border-ul-li;
}

ul {
  padding-inline-start: 0;
  list-style-type: none;
  margin: 0;
  margin-inline-start: 1rem;
  line-height: var(--line-height);
  ul {
    margin-inline-start: 0;
  }
  li {
    position: relative;
    padding-inline-start: 2ch;

    // Draw a vertical bar on the left edge
    @extend %ul-li-vertical;

    --midway: calc(var(--line-height) * 1rem / 2);

    // Draw a horizontal bar between the vertical and the content
    &::before {
      position: absolute;
      display: block;
      top: var(--midway);
      left: 0;
      content: "";
      width: 1.5ch;
      border-block-start: $border-ul-li;
    }

    // On the last element, only draw up to the group, but *not* down the
    // contents.
    &:last-child {
      border-inline-start-color: transparent;
      &::before {
        width: calc(1.5ch + 2px);
        left: -2px;
      }
      &::after {
        position: absolute;
        top: 0;
        left: -2px;
        display: block;
        content: "";
        height: var(--midway);
        @extend %ul-li-vertical;
      }
    }

    &:not(:last-child) {
      > :is(p, figure):last-child {
        margin-block-end: 0;
        padding-block-end: 1rem;
      }
    }

    &:not(:first-child) > :is(p, figure):first-child {
      margin-block-start: 0;
    }
  }
}

:not(ul > li):not(details) > ul {
  margin: 1rem;

  // If the list has only one element in total, don't display the vertical bar.
  > li:only-child::after {
    display: none !important;
  }

  // On the first element of a top-level list, the vertical bar begins at the
  // half-line and *descends* the rest of the element.
  > li:first-child {
    border-inline-start-color: transparent;
    &::before {
      width: calc(1.5ch + 2px);
      left: -2px;
    }
    &::after {
      position: absolute;
      left: -2px;
      display: block;
      content: "";
      top: var(--midway);
      height: calc(100% - var(--midway));
      @extend %ul-li-vertical;
    }
  }

  > li:not(:last-child):has(> :is(figure)) {
    padding-block-end: 1rem;
  }
}

table {
  border-collapse: collapse;
  &,
  thead,
  tfoot {
    border: 2px solid var(--fg);
  }
  th,
  td {
    border: 1px solid var(--fg);
    padding: 0.25rem;
  }
  > caption {
    margin-block-end: 0.5rem;
  }
}

kbd {
  border-width: 1px;
  border-style: outset;
  border-color: var(--fg);
  border-radius: 6px;
  box-shadow: 2px 2px var(--fg);
  padding: 2px 4px;

  + kbd {
    margin-inline-start: 6px;
  }
}

ins,
del,
mark {
  --color-mark: var(--fg);
  --color-fill: #808080;
  text-decoration: none;
  padding: 0 0.25rem;
  border: var(--color-mark) solid 2px;
  background-color: var(--color-fill);
}

ins {
  --color-mark: var(--ansi-green);
  --color-fill: #{transparentize($ansi-green, 0.25)};
}

del {
  --color-mark: var(--ansi-red);
  --color-fill: #{transparentize($ansi-red, 0.25)};
}

mark {
  --color-mark: var(--ansi-yellow);
  --color-fill: #{transparentize($ansi-yellow, 0.25)};
}

main img {
  min-width: 20rem;
  max-width: 100%;
  margin-inline: auto;
  display: block;
}

%figure {
  border: $border-common;
  border-radius: 1rem;
  margin-inline: 1rem;
  padding: 1rem;
  box-shadow: 4px 4px var(--fg);
}

figure {
  @extend %figure;

  figcaption {
    text-align: center;
    padding-block: 0.5rem;

    &:first-child {
      padding-block-start: 0;
    }
    &:last-child {
      padding-block-end: 0;
    }
  }
}

:not(figure) > pre {
  @extend %figure;
  width: calc(100% - 2rem);
}

audio,
video {
  margin: 0 auto;
  display: block;
}

// meter, progress
//
// come back to these

iframe {
  @extend .barber-orange;
}

embed,
object {
  border: $border-common;
}

%form-border {
  border: $border-common;
  border-radius: 0.5rem;
  padding: 0.5rem;
}

form {
  @extend %form-border;
  border-radius: 1rem;

  input,
  button {
    --color-border: var(--fg);
    border: 2px outset var(--color-border);
    padding: 0.25rem;
    margin: 0.25rem;

    &:active {
      border-style: inset;
    }

    &:focus {
      border-color: var(--ansi-blue);
    }

    &[type="submit"] {
      --color-border: var(--ansi-green);
    }

    &[type="reset"] {
      --color-border: var(--ansi-red);
    }

    &[type="button"] {
      --color-border: var(--ansi-purple);
    }
  }

  label {
    @extend .text-mono;
    font-variant: small-caps;
    padding: 0 0.25rem;
  }

  button,
  input[type="submit"],
  input[type="button"],
  input[type="reset"],
  input[disabled] {
    @extend .text-mono;
    padding-inline: 0.5rem;
    border-radius: 0.5rem;

    box-shadow: 2px 2px var(--color-border);

    &:active {
      box-shadow: -2px -2px var(--color-border);
    }
  }

  :is(button, input):disabled {
    --color-border: #808080;
  }
}

fieldset {
  @extend %form-border;

  legend {
    @extend .text-mono;
    text-transform: uppercase;
  }
}

textarea {
  @extend %form-border;
  @extend .text-mono;
}

%navitem {
  @extend .text-mono;
  padding-inline-end: 0.5ch;
}

#about nav {
  details > summary:first-of-type {
    display: inline-block;
    &::before {
      @extend %navitem;
      content: "+";
    }
  }

  details[open] > summary:first-of-type::before {
    content: "-";
  }

  li > :not(details)::before {
    @extend %navitem;
    content: "·";
  }
}
